name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*-llamacpp.*' ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.21'
  LLAMA_CPP_BUILD: 'b6099'

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go-version: ['1.21', '1.22','1.24']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4

    - name: Set up Go
      uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-

    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential
        # Install Vulkan tools for GPU detection
        sudo apt-get install -y vulkan-tools || echo "Vulkan tools not available"
        # Install OpenCL tools for GPU detection
        sudo apt-get install -y clinfo || echo "OpenCL tools not available"

    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install cmake
        # Install Vulkan SDK for GPU detection (if available)
        brew install --cask vulkan-sdk || echo "Vulkan SDK not available"

    - name: Install dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install cmake
        # Install Vulkan SDK for GPU detection (if available)
        #choco install vulkan-sdk || echo "Vulkan SDK not available"

    - name: Download dependencies
      run: go mod download

    - name: GPU Detection Test
      run: |
        echo "Testing GPU detection capabilities..."
        make detect-gpu || echo "GPU detection completed"

    - name: Verify platform compatibility
      run: |
        echo "Testing platform compatibility..."
        go build -v ./...
        echo "Build successful for ${{ runner.os }}"

    - name: Run tests
      run: go test -v ./...

    - name: Run platform-specific tests
      run: go test -v -run TestPlatformSpecific ./...

    - name: Run tests with race detection
      if: matrix.os != 'windows-latest' # Race detector not fully supported on Windows
      run: go test -race -v ./...

    - name: Run benchmarks
      run: go test -bench=. -benchmem ./...

  # gpu-detection:
  #   name: GPU Detection Testing
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       os: [ubuntu-latest, macos-latest, windows-latest]
    
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

  #   - name: Set up Go
  #     uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
  #     with:
  #       go-version: ${{ env.GO_VERSION }}

  #   - name: Cache Go modules
  #     uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4
  #     with:
  #       path: |
  #         ~/.cache/go-build
  #         ~/go/pkg/mod
  #       key: ${{ runner.os }}-go-gpu-${{ hashFiles('**/go.sum') }}
  #       restore-keys: |
  #         ${{ runner.os }}-go-gpu-

  #   - name: Install GPU detection tools (Ubuntu)
  #     if: matrix.os == 'ubuntu-latest'
  #     run: |
  #       sudo apt-get update
  #       sudo apt-get install -y vulkan-tools clinfo || echo "Optional GPU tools not available"

  #   - name: Install GPU detection tools (macOS)
  #     if: matrix.os == 'macos-latest'
  #     run: |
  #       # Metal is built-in on macOS
  #       system_profiler SPDisplaysDataType | grep Metal || echo "Metal info not available"

  #   - name: Install GPU detection tools (Windows)
  #     if: matrix.os == 'windows-latest'
  #     run: |
  #       # Try to install Vulkan SDK (optional)
  #       choco install vulkan-sdk || echo "Vulkan SDK not available"

  #   - name: Download dependencies
  #     run: go mod download

  #   - name: Test GPU backend detection
  #     run: |
  #       echo "Testing GPU backend detection..."
  #       make test-gpu || echo "GPU tests completed"

  #   - name: Test GPU backend downloader functionality
  #     run: |
  #       echo "Testing GPU-aware library downloading..."
  #       go test -v -run TestPlatformAsset ./...
        
  #   - name: Comprehensive GPU detection
  #     run: |
  #       echo "Running comprehensive GPU detection..."
  #       make detect-gpu || echo "GPU detection completed"

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4

    - name: Set up Go
      uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: golangci-lint
      uses: golangci/golangci-lint-action@4afd733a84b1f43292c63897423277bb7f4313a9 # v8
      with:
        version: latest

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4

    - name: Set up Go
      uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run Gosec Security Scanner
      uses: securego/gosec@master
      with:
        # Exclude acceptable issues and set severity to medium:
        # G103: Use of unsafe calls (necessary for C interop)
        # G104: Errors unhandled (acceptable for non-critical operations)
        # G115: Integer overflow with validation (all conversions are validated)
        # G304: File inclusion via variable (expected in CLI tools)
        # This reduces noise while focusing on actionable security issues
        args: '-exclude=G103,G104,G115,G304 -severity=medium ./...'

  release:
    name: Create Release
    if: startsWith(github.ref, 'refs/tags/v') && contains(github.ref, '-llamacpp.')
    runs-on: ubuntu-latest
    needs: [examples, documentation, test, lint, security]
    permissions:
      contents: write
      pages: write
      id-token: write

    # Deploy to the github-pages environment for releases
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4

    - name: Set up Go
      uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ env.GO_VERSION }}-

    - name: Validate release version in CHANGELOG.md
      env:
        VERSION: ${{ github.ref_name }}
      run: |
        # Extract full version from tag (e.g., v0.2.0-llamacpp.b6099)
        export FULL_VERSION=${VERSION}
        echo "Validating release version: $FULL_VERSION"
        
        # Check if the full version exists in CHANGELOG.md
        if ! grep -q "## \[$FULL_VERSION\]" CHANGELOG.md; then
          echo "❌ Error: Version $FULL_VERSION not found in CHANGELOG.md"
          echo "Please add a changelog entry for version $FULL_VERSION before creating a release."
          echo "Expected format: ## [$FULL_VERSION] - YYYY-MM-DD"
          exit 1
        fi
        
        echo "✅ Version $FULL_VERSION found in CHANGELOG.md"

    - name: Create release packages using Makefile
      env:
        FULL_VERSION: ${{ github.ref_name }}
        LLAMA_CPP_BUILD: ${{ env.LLAMA_CPP_BUILD }}
      run: |
        # Extract base version from full version tag (e.g., v0.2.0-llamacpp.b6099 -> 0.2.0)
        export VERSION=$(echo "${FULL_VERSION}" | sed 's/^v//' | sed 's/-llamacpp\..*//')
        echo "Creating release for full version: $FULL_VERSION"
        echo "Base version: $VERSION"
        echo "Using llama.cpp build: $LLAMA_CPP_BUILD"
        make release

    - name: Extract release notes
      id: extract_notes
      run: |
        # Extract release notes from CHANGELOG.md
        FULL_VERSION=${{ github.ref_name }}
        echo "Extracting release notes for version: $FULL_VERSION"
        
        # Extract the section for this version
        if sed -n "/## \[$FULL_VERSION\]/,/## \[/p" CHANGELOG.md | sed '$d' > release_notes.md; then
          # Check if we actually extracted content (more than just the header)
          if [ $(wc -l < release_notes.md) -le 1 ]; then
            echo "⚠️  Warning: No detailed release notes found for version $FULL_VERSION"
            echo "Release $FULL_VERSION" > release_notes.md
            echo "" >> release_notes.md
            echo "See CHANGELOG.md for details." >> release_notes.md
          else
            echo "✅ Release notes extracted successfully"
          fi
        else
          echo "❌ Failed to extract release notes"
          echo "Release $FULL_VERSION" > release_notes.md
          echo "" >> release_notes.md
          echo "See CHANGELOG.md for details." >> release_notes.md
        fi

    - name: Create GitHub Release
      uses: actions/create-release@0cb9c9b65d5d1901c1f53e5e66eaf4afd303e70e # v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body_path: release_notes.md
        draft: false
        prerelease: false

    - name: Upload Release Assets
      run: |
        for file in dist/*; do
          if [ -f "$file" ]; then
            echo "Uploading $file"
            curl \
              -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/octet-stream" \
              --data-binary @"$file" \
              "${{ steps.create_release.outputs.upload_url }}?name=$(basename $file)"
          fi
        done

    - name: Publish to Go Module Proxy
      run: |
        echo "Publishing module to Go module proxy..."
        # Get the module name from go.mod
        MODULE_NAME=$(go mod edit -json | jq -r '.Module.Path')
        TAG_VERSION=${{ github.ref_name }}
        
        echo "Module: $MODULE_NAME"
        echo "Version: $TAG_VERSION"
        
        # Request the module from the proxy to trigger indexing
        echo "Requesting module from proxy.golang.org..."
        GOPROXY=proxy.golang.org go list -m "$MODULE_NAME@$TAG_VERSION" || echo "Module may take a few minutes to be available"
        
        # Also try to fetch module info to ensure it's properly indexed
        echo "Verifying module availability..."
        curl -f "https://proxy.golang.org/$MODULE_NAME/@v/$TAG_VERSION.info" || echo "Module indexing in progress"
        
        echo "Go module publication requested. The module should be available at:"
        echo "  go get $MODULE_NAME@$TAG_VERSION"

    - name: Install doc2go for release documentation
      run: go install go.abhg.dev/doc2go@latest
    
    - name: Generate API reference for release
      run: doc2go ./...
    
    - name: Upload pages artifact for release
      uses: actions/upload-pages-artifact@56afc609e74202658d3ffba0e8f6dda462b719fa # v3.0.1

    - name: Deploy documentation to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@d6db90164ac5ed86f2b6aed7e0febac5b3c0c03e # v4

  examples:
    name: Build Examples
    runs-on: ${{ matrix.os }}
    needs: [test, lint, security]
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4

    - name: Set up Go
      uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Build examples
      run: make build-examples

  documentation:
    name: Generate Documentation
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4

    - name: Set up Go
      uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install doc2go
      run: go install go.abhg.dev/doc2go@latest
    
    - name: Generate API reference
      run: doc2go ./...


        