name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.21'
  LLAMA_CPP_BUILD: 'b6076'

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go-version: ['1.21', '1.22','1.24']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

    - name: Set up Go
      uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-

    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential

    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install cmake

    - name: Install dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install cmake

    - name: Download dependencies
      run: go mod download

    - name: Verify platform compatibility
      run: |
        echo "Testing platform compatibility..."
        go build -v ./...
        echo "Build successful for ${{ runner.os }}"

    - name: Run tests
      run: go test -v ./...

    - name: Run platform-specific tests
      run: go test -v -run TestPlatformSpecific ./...

    # - name: Cross-compile test (Windows)
    #   if: matrix.os != 'windows-latest'
    #   run: |
    #     echo "Testing Windows cross-compilation..."
    #     GOOS=windows GOARCH=amd64 go build -v ./...

    # - name: Cross-compile test (Linux)
    #   if: matrix.os != 'ubuntu-latest'
    #   run: |
    #     echo "Testing Linux cross-compilation..."
    #     GOOS=linux GOARCH=amd64 go build -v ./...

    # - name: Cross-compile test (macOS)
    #   if: matrix.os != 'macos-latest'
    #   run: |
    #     echo "Testing macOS cross-compilation..."
    #     GOOS=darwin GOARCH=amd64 go build -v ./...

    - name: Run tests with race detection
      if: matrix.os != 'windows-latest' # Race detector not fully supported on Windows
      run: go test -race -v ./...

    - name: Run benchmarks
      run: go test -bench=. -benchmem ./...

  # cross-platform:
  #   name: Cross-Platform Compatibility
  #   runs-on: ubuntu-latest
    
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

  #   - name: Set up Go
  #     uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
  #     with:
  #       go-version: ${{ env.GO_VERSION }}

  #   - name: Download dependencies
  #     run: go mod download

  #   - name: Test all platform builds
  #     run: |
  #       echo "Testing cross-compilation for all supported platforms..."
        
  #       # Test Windows (both architectures)
  #       echo "Building for Windows amd64..."
  #       GOOS=windows GOARCH=amd64 go build -v ./...
  #       echo "Building for Windows arm64..."
  #       GOOS=windows GOARCH=arm64 go build -v ./...
        
  #       # Test Linux (both architectures)
  #       echo "Building for Linux amd64..."
  #       GOOS=linux GOARCH=amd64 go build -v ./...
  #       echo "Building for Linux arm64..."
  #       GOOS=linux GOARCH=arm64 go build -v ./...
        
  #       # Test macOS (both architectures)
  #       echo "Building for macOS amd64..."
  #       GOOS=darwin GOARCH=amd64 go build -v ./...
  #       echo "Building for macOS arm64..."
  #       GOOS=darwin GOARCH=arm64 go build -v ./...
        
  #       echo "All cross-compilation tests passed!"

  #   - name: Test platform-specific code coverage
  #     run: |
  #       echo "Testing platform-specific code paths..."
  #       go test -v -coverprofile=coverage.out ./...
  #       go tool cover -func=coverage.out

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

    - name: Set up Go
      uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: golangci-lint
      uses: golangci/golangci-lint-action@4afd733a84b1f43292c63897423277bb7f4313a9 # v8
      with:
        version: latest

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

    - name: Set up Go
      uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run Gosec Security Scanner
      uses: securego/gosec@master
      with:
        # Exclude acceptable issues and set severity to medium:
        # G103: Use of unsafe calls (necessary for C interop)
        # G104: Errors unhandled (acceptable for non-critical operations)
        # G115: Integer overflow with validation (all conversions are validated)
        # G304: File inclusion via variable (expected in CLI tools)
        # This reduces noise while focusing on actionable security issues
        args: '-exclude=G103,G104,G115,G304 -severity=medium ./...'

  # download-libs:
  #   name: Download Libraries
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       include:
  #         # Linux downloads
  #         - os: ubuntu-latest
  #           platform: linux
  #           arch: amd64
  #           description: "Download pre-built libraries"
  #         - os: ubuntu-latest
  #           platform: linux
  #           arch: arm64
  #           description: "Download pre-built libraries"
  #         # macOS downloads
  #         - os: macos-latest
  #           platform: darwin
  #           arch: amd64
  #           description: "Download pre-built libraries"
  #         - os: macos-latest
  #           platform: darwin
  #           arch: arm64
  #           description: "Download pre-built libraries"
  #         # Windows downloads
  #         - os: windows-latest
  #           platform: windows
  #           arch: amd64
  #           description: "Download pre-built libraries"
    
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

  #   - name: Set up Go
  #     uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
  #     with:
  #       go-version: ${{ env.GO_VERSION }}

  #   - name: Cache Go modules
  #     uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4
  #     with:
  #       path: |
  #         ~/.cache/go-build
  #         ~/go/pkg/mod
  #       key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}
  #       restore-keys: |
  #         ${{ runner.os }}-go-${{ env.GO_VERSION }}-

  #   - name: Download dependencies
  #     run: go mod download

  #   - name: Download llama.cpp libraries using Makefile
  #     env:
  #       LLAMA_CPP_BUILD: ${{ env.LLAMA_CPP_BUILD }}
  #       GOOS: ${{ matrix.platform }}
  #       GOARCH: ${{ matrix.arch }}
  #     run: |
  #       echo "Downloading libraries for ${{ matrix.platform }}-${{ matrix.arch }} - ${{ matrix.description }}"
  #       make download-libs

  #   - name: Upload library artifacts
  #     uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
  #     with:
  #       name: libs-${{ matrix.platform }}-${{ matrix.arch }}
  #       path: libs/${{ matrix.platform }}_${{ matrix.arch }}/

  # test-hip:
  #   name: Test HIP Support
  #   runs-on: ubuntu-latest
  #   needs: build-libs
  #   if: github.event_name != 'pull_request' || contains(github.event.pull_request.labels.*.name, 'test-hip')
    
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
    
  #   - name: Install ROCm (HIP) SDK
  #     run: |
  #       wget -q -O - https://repo.radeon.com/rocm/rocm.gpg.key | sudo apt-key add -
  #       echo 'deb [arch=amd64] https://repo.radeon.com/rocm/apt/debian/ ubuntu main' | sudo tee /etc/apt/sources.list.d/rocm.list
  #       sudo apt-get update
  #       sudo apt-get install -y rocm-dev hip-dev
  #       echo "/opt/rocm/bin" >> $GITHUB_PATH
  #       echo "ROCM_PATH=/opt/rocm" >> $GITHUB_ENV
    
  #   - name: Test HIP detection
  #     run: |
  #       echo "Testing HIP detection and build configuration..."
  #       make clone-llamacpp
  #       # This should detect HIP and configure build accordingly
  #       cd build/llama.cpp/build-linux-amd64
  #       if cmake --version >/dev/null 2>&1; then
  #         cmake .. -DGGML_HIP=ON 2>&1 | tee hip-config.log
  #         if grep -q "HIP found" hip-config.log; then
  #           echo "✅ HIP detected successfully"
  #         else
  #           echo "❌ HIP detection failed"
  #           exit 1
  #         fi
  #       fi

  # build:
  #   name: Build Go Bindings
  #   runs-on: ubuntu-latest
  #   needs: [test, lint, security]
  #   strategy:
  #     matrix:
  #       goos: [linux, darwin, windows]
  #       goarch: [amd64, arm64]
  #       exclude:
  #         - goos: windows
  #           goarch: arm64  # Windows ARM64 Go support is limited

  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

  #   - name: Set up Go
  #     uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
  #     with:
  #       go-version: ${{ env.GO_VERSION }}

  #   - name: Cache Go modules
  #     uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4
  #     with:
  #       path: |
  #         ~/.cache/go-build
  #         ~/go/pkg/mod
  #       key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}

  #   - name: Download dependencies
  #     run: go mod download

  #   - name: Build
  #     env:
  #       GOOS: ${{ matrix.goos }}
  #       GOARCH: ${{ matrix.goarch }}
  #       CGO_ENABLED: 0
  #     run: make build

  #   - name: Upload build artifacts
  #     uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
  #     with:
  #       name: build-${{ matrix.goos }}-${{ matrix.goarch }}
  #       path: build/${{ matrix.goos }}_${{ matrix.goarch }}/

  release:
    name: Create Release
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    needs: [examples, documentation, test, lint, security]
    permissions:
      pages: write
      contents: write

    # Deploy to the github-pages environment
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

    - name: Set up Go
      uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ env.GO_VERSION }}-

    - name: Create release packages using Makefile
      env:
        VERSION: ${{ github.ref_name }}
        LLAMA_CPP_BUILD: ${{ env.LLAMA_CPP_BUILD }}
      run: |
        # Extract version from tag (remove 'v' prefix)
        export VERSION=${VERSION#v}
        echo "Creating release for version: $VERSION"
        echo "Using llama.cpp build: $LLAMA_CPP_BUILD"
        make release

    - name: Extract release notes
      id: extract_notes
      run: |
        # Extract release notes from CHANGELOG.md
        VERSION=${{ github.ref_name }}
        VERSION=${VERSION#v}
        sed -n "/## \[$VERSION\]/,/## \[/p" CHANGELOG.md | sed '$d' > release_notes.md

    - name: Create GitHub Release
      uses: actions/create-release@0cb9c9b65d5d1901c1f53e5e66eaf4afd303e70e # v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body_path: release_notes.md
        draft: false
        prerelease: false

    - name: Upload Release Assets
      run: |
        for file in dist/*; do
          if [ -f "$file" ]; then
            echo "Uploading $file"
            curl \
              -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/octet-stream" \
              --data-binary @"$file" \
              "${{ steps.create_release.outputs.upload_url }}?name=$(basename $file)"
          fi
        done

    - name: Publish to Go Module Proxy
      run: |
        echo "Publishing module to Go module proxy..."
        # Get the module name from go.mod
        MODULE_NAME=$(go mod edit -json | jq -r '.Module.Path')
        TAG_VERSION=${{ github.ref_name }}
        
        echo "Module: $MODULE_NAME"
        echo "Version: $TAG_VERSION"
        
        # Request the module from the proxy to trigger indexing
        echo "Requesting module from proxy.golang.org..."
        GOPROXY=proxy.golang.org go list -m "$MODULE_NAME@$TAG_VERSION" || echo "Module may take a few minutes to be available"
        
        # Also try to fetch module info to ensure it's properly indexed
        echo "Verifying module availability..."
        curl -f "https://proxy.golang.org/$MODULE_NAME/@v/$TAG_VERSION.info" || echo "Module indexing in progress"
        
        echo "Go module publication requested. The module should be available at:"
        echo "  go get $MODULE_NAME@$TAG_VERSION"

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@d6db90164ac5ed86f2b6aed7e0febac5b3c0c03e # v4

  examples:
    name: Build Examples
    runs-on: ${{ matrix.os }}
    needs: [test, lint, security]
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

    - name: Set up Go
      uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Build examples
      run: make build-examples

  documentation:
    name: Generate Documentation
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

    - name: Set up Go
      uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install doc2go
      run: go install go.abhg.dev/doc2go@latest
    
    - name: Generate API reference
      run: doc2go ./...
    
    - name: Upload pages
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-pages-artifact@56afc609e74202658d3ffba0e8f6dda462b719fa # v3.0.1


        