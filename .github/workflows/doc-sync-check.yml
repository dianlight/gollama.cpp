name: Documentation Sync Check

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]

jobs:
  doc-sync-check:
    name: Check Documentation Sync
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need full history to check what changed

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'

    - name: Check if code changes require doc updates
      run: |
        # Get list of changed files
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }}..${{ github.sha }})
        else
          CHANGED_FILES=$(git diff --name-only HEAD~1..HEAD)
        fi
        
        echo "Changed files:"
        echo "$CHANGED_FILES"
        echo ""
        
        # Check if any Go files changed
        GO_FILES_CHANGED=$(echo "$CHANGED_FILES" | grep -E '\.go$' || true)
        
        # Check if any API files changed (main package files)
        API_FILES_CHANGED=$(echo "$CHANGED_FILES" | grep -E '^(gollama\.go|platform_.*\.go|config\.go|loader\.go)$' || true)
        
        # Check if examples changed
        EXAMPLE_FILES_CHANGED=$(echo "$CHANGED_FILES" | grep -E '^examples/' || true)
        
        # Check if CI files changed
        CI_FILES_CHANGED=$(echo "$CHANGED_FILES" | grep -E '\.github/workflows/' || true)
        
        # Check if documentation was updated
        DOC_FILES_CHANGED=$(echo "$CHANGED_FILES" | grep -E '\.(md|txt)$' || true)
        
        echo "Analysis:"
        echo "- Go files changed: $([ -n "$GO_FILES_CHANGED" ] && echo "YES" || echo "NO")"
        echo "- API files changed: $([ -n "$API_FILES_CHANGED" ] && echo "YES" || echo "NO")"
        echo "- Example files changed: $([ -n "$EXAMPLE_FILES_CHANGED" ] && echo "YES" || echo "NO")"
        echo "- CI files changed: $([ -n "$CI_FILES_CHANGED" ] && echo "YES" || echo "NO")"
        echo "- Documentation changed: $([ -n "$DOC_FILES_CHANGED" ] && echo "YES" || echo "NO")"
        echo ""
        
        # Create recommendations
        RECOMMENDATIONS=""
        
        if [ -n "$API_FILES_CHANGED" ] && [ -z "$DOC_FILES_CHANGED" ]; then
          RECOMMENDATIONS="$RECOMMENDATIONS
        - API files changed but no documentation updated. Consider updating:
          * README.md (if public API changed)
          * Go doc comments in the changed files
          * CHANGELOG.md with new features/changes"
        fi
        
        if [ -n "$EXAMPLE_FILES_CHANGED" ]; then
          EXAMPLE_READMES_CHANGED=$(echo "$CHANGED_FILES" | grep -E '^examples/[^/]+/README\.md$' || true)
          if [ -z "$EXAMPLE_READMES_CHANGED" ]; then
            RECOMMENDATIONS="$RECOMMENDATIONS
        - Example files changed but corresponding README.md files may need updates"
          fi
        fi
        
        if [ -n "$GO_FILES_CHANGED" ]; then
          # Check if go.mod changed, might need CI updates
          GO_MOD_CHANGED=$(echo "$CHANGED_FILES" | grep -E 'go\.mod$' || true)
          if [ -n "$GO_MOD_CHANGED" ] && [ -z "$CI_FILES_CHANGED" ]; then
            RECOMMENDATIONS="$RECOMMENDATIONS
        - go.mod changed but CI configuration unchanged. Check if:
          * New system dependencies need to be added to CI
          * Go version requirements changed
          * New build flags or environment variables needed"
          fi
        fi
        
        if [ -n "$RECOMMENDATIONS" ]; then
          echo "üîç DOCUMENTATION SYNC RECOMMENDATIONS:"
          echo "$RECOMMENDATIONS"
          echo ""
          echo "These are suggestions to help keep documentation in sync with code changes."
          echo "Review the changes and update documentation as needed."
        else
          echo "‚úÖ No obvious documentation sync issues detected."
        fi

    - name: Validate examples compile
      run: |
        echo "Checking that all examples compile..."
        
        for example_dir in examples/*/; do
          if [ -f "$example_dir/go.mod" ]; then
            echo "Checking example: $(basename "$example_dir")"
            cd "$example_dir"
            
            # Try to build the example
            if ! go build -o /tmp/example-binary .; then
              echo "‚ùå Example $(basename "$example_dir") failed to compile"
              exit 1
            else
              echo "‚úÖ Example $(basename "$example_dir") compiles successfully"
            fi
            
            cd - > /dev/null
          fi
        done
        
        echo "All examples compile successfully!"

    - name: Check for TODO/FIXME in new code
      run: |
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          # Check only new lines in PR
          TODOS=$(git diff ${{ github.event.pull_request.base.sha }}..${{ github.sha }} | grep -E '^\+.*\b(TODO|FIXME|XXX|HACK)\b' || true)
        else
          # Check last commit
          TODOS=$(git diff HEAD~1..HEAD | grep -E '^\+.*\b(TODO|FIXME|XXX|HACK)\b' || true)
        fi
        
        if [ -n "$TODOS" ]; then
          echo "‚ö†Ô∏è  Found TODO/FIXME comments in new code:"
          echo "$TODOS"
          echo ""
          echo "Consider addressing these or creating GitHub issues to track them."
        else
          echo "‚úÖ No TODO/FIXME comments found in new code."
        fi

    - name: Check CHANGELOG.md format
      run: |
        if [ -f "CHANGELOG.md" ]; then
          echo "Checking CHANGELOG.md format..."
          
          # Check if there's an "Unreleased" section
          if ! grep -q "## \[Unreleased\]" CHANGELOG.md; then
            echo "‚ùå CHANGELOG.md should have an [Unreleased] section for new changes"
            exit 1
          fi
          
          # Check basic format
          if ! grep -q "### Added\|### Changed\|### Fixed" CHANGELOG.md; then
            echo "‚ÑπÔ∏è  Consider using standard CHANGELOG format with Added/Changed/Fixed sections"
          fi
          
          echo "‚úÖ CHANGELOG.md format looks good"
        else
          echo "‚ö†Ô∏è  No CHANGELOG.md found - consider adding one to track changes"
        fi
